{"remainingRequest":"E:\\github\\python_note\\2020-08-01-Python-ZST-4200\\2020-08-23-VUE\\vue_todo\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\github\\python_note\\2020-08-01-Python-ZST-4200\\2020-08-23-VUE\\vue_todo\\src\\views\\Todo.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\github\\python_note\\2020-08-01-Python-ZST-4200\\2020-08-23-VUE\\vue_todo\\src\\views\\Todo.vue","mtime":1598924376862},{"path":"E:\\github\\python_note\\2020-08-01-Python-ZST-4200\\2020-08-23-VUE\\vue_todo\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\github\\python_note\\2020-08-01-Python-ZST-4200\\2020-08-23-VUE\\vue_todo\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\github\\python_note\\2020-08-01-Python-ZST-4200\\2020-08-23-VUE\\vue_todo\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\github\\python_note\\2020-08-01-Python-ZST-4200\\2020-08-23-VUE\\vue_todo\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KDQoNCi8qDQoNClZVReaYr212dm3mqKHlvI8NCk1WVk3mmK9Nb2RlbC1WaWV3LVZpZXdNb2RlbOeahOeugOWGmeOAguWug+acrOi0qOS4iuWwseaYr01WQyDnmoTmlLnov5vniYjjgIJNVlZNIOWwseaYr+WwhuWFtuS4reeahFZpZXcg55qE54q25oCB5ZKM6KGM5Li65oq96LGh5YyW77yM6K6p5oiR5Lus5bCG6KeG5Zu+IFVJIOWSjOS4muWKoemAu+i+keWIhuW8gOOAgg0KDQp0ZW1wbGF0ZSDmmK8gdmlldw0KbW9kZWwg5pivIGphdmFzY3JpcHTku6PnoIENClZpZXdNb2RlbCDmmK8gdmlldyDot58gbW9kZWwg5LmL6Ze055qE5qGl5qKB77yaDQogIGRhdGFiaW5k77yI5pWw5o2u57uR5a6a77yJDQogIGRvbSBsaXN0ZW5lcu+8iGRvbeebkeWQrO+8iQ0KDQoNCjxsaT4NCiAgPGlucHV0IHR5cGU9InRleHQiLz4NCiAgIDEt5LuK5aSp5Y676LaF5biCIA0KPC9saT4NCiAg5q2k5pe2aW5wdXQg5qGG6L6T5YWl77yaIDIyMjIyDQoNCueEtuWQjuWvueeCueWHu+WIoOmZpCDigJgxLeS7iuWkqeWOu+i2heW4guKAmSDov5nkuKogbGkg5qCH562+5Lit55qEIGJ1dHRvbiDliKDpmaTmjInpkq4NCuinpuWPkeWGhemDqOeahOS/ruaUuemAu+i+keWmguS4i++8mg0KICDlhbbkuK3vvIwg5Y+q5L+u5pS55bqU6K+l5L+u5pS555qE6YOo5YiG77yM5rKh5pyJ5b+F6KaB5a+5IGlucHV0IOeahOWGheWuuei/m+ihjOS/ruaUue+8jOWboOS4uuayoeacieWvuSBpbnB1dCDov5vooYzku7vkvZXnmoTnu5HlrprvvIwNCiAgIg0KICAwIC0g5LuK5aSp5Y676ZO26KGMIA0KICAxIC0g5LuK5aSp5Y676LaF5biCIA0KICAyIC0g5LuK5aSp5Y675LiK54+tIA0KICAzIC0g5LuK5aSp5Y675ZCD6aWtIA0KICAiDQogIOaKiiAgIjEgLSDku4rlpKnljrvotoXluIIiIOaUueS4uiAiMSAtIOS7iuWkqeWOu+S4iuePrSINCiAg5oqKICAiMiAtIOS7iuWkqeWOu+S4iuePrSIg5pS55Li6ICIyIC0g5LuK5aSp5Y675ZCD6aWtIg0KDQogIOacgOWQjuaKiiAiMyAtIOS7iuWkqeWOu+WQg+mlrSIg5Yig6Zmk5o6J44CCDQoNCiovDQoNCi8vIOWvvOWFpeS4gOS4qmRlZmF1bHTlr7nosaENCmV4cG9ydCBkZWZhdWx0IHsNCiAgZGF0YSgpew0KICAgIHJldHVybiB7ICAvLyDov5Tlm57lgLwNCiAgICAgIHRvZG9fbGlzdDogWw0KICAgICAgICB7DQogICAgICAgICAgY29udGVudDogJ+S7iuWkqeWOu+mTtuihjCcNCiAgICAgICAgfSwNCiAgICAgICAgIHsNCiAgICAgICAgICBjb250ZW50OiAn5LuK5aSp5Y676LaF5biCJw0KICAgICAgICB9LA0KICAgICAgICB7DQogICAgICAgICAgY29udGVudDogJ+S7iuWkqeWOu+S4iuePrScNCiAgICAgICAgfSwNCiAgICAgICAgew0KICAgICAgICAgIGNvbnRlbnQ6ICfku4rlpKnljrvlkIPppa0nDQogICAgICAgIH0sDQogICAgICBdDQogICAgfQ0KICB9LA0KICBtZXRob2RzOnsNCiAgICB0b0RlbGV0ZShpbmRleCl7DQogICAgICAgIGNvbnNvbGUubG9nKCdkZWxldGUgJyArICdpbmRleDonICsgaW5kZXggKyAnLCBjb250ZW50OicgKyB0aGlzLnRvZG9fbGlzdFtpbmRleF0uY29udGVudCkNCiAgICAgICAgdGhpcy50b2RvX2xpc3Quc3BsaWNlKGluZGV4LCAxKQ0KICAgIH0NCiAgfQ0KfQ0KDQo="},{"version":3,"sources":["Todo.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;AAeA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Todo.vue","sourceRoot":"src/views","sourcesContent":["<template>\r\n  <div>\r\n    <ul>\r\n      <li v-for=\"(v, k) in todo_list\" :key=\"k\">\r\n        <input type=\"text\"/>\r\n        {{ k }} - {{ v.content }} \r\n        <button @click=\"toDelete(k)\">delete</button>\r\n      </li>\r\n      \r\n    </ul>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n\r\n/*\r\n\r\nVUE是mvvm模式\r\nMVVM是Model-View-ViewModel的简写。它本质上就是MVC 的改进版。MVVM 就是将其中的View 的状态和行为抽象化，让我们将视图 UI 和业务逻辑分开。\r\n\r\ntemplate 是 view\r\nmodel 是 javascript代码\r\nViewModel 是 view 跟 model 之间的桥梁：\r\n  databind（数据绑定）\r\n  dom listener（dom监听）\r\n\r\n\r\n<li>\r\n  <input type=\"text\"/>\r\n   1-今天去超市 \r\n</li>\r\n  此时input 框输入： 22222\r\n\r\n然后对点击删除 ‘1-今天去超市’ 这个 li 标签中的 button 删除按钮\r\n触发内部的修改逻辑如下：\r\n  其中， 只修改应该修改的部分，没有必要对 input 的内容进行修改，因为没有对 input 进行任何的绑定，\r\n  \"\r\n  0 - 今天去银行 \r\n  1 - 今天去超市 \r\n  2 - 今天去上班 \r\n  3 - 今天去吃饭 \r\n  \"\r\n  把  \"1 - 今天去超市\" 改为 \"1 - 今天去上班\"\r\n  把  \"2 - 今天去上班\" 改为 \"2 - 今天去吃饭\"\r\n\r\n  最后把 \"3 - 今天去吃饭\" 删除掉。\r\n\r\n*/\r\n\r\n// 导入一个default对象\r\nexport default {\r\n  data(){\r\n    return {  // 返回值\r\n      todo_list: [\r\n        {\r\n          content: '今天去银行'\r\n        },\r\n         {\r\n          content: '今天去超市'\r\n        },\r\n        {\r\n          content: '今天去上班'\r\n        },\r\n        {\r\n          content: '今天去吃饭'\r\n        },\r\n      ]\r\n    }\r\n  },\r\n  methods:{\r\n    toDelete(index){\r\n        console.log('delete ' + 'index:' + index + ', content:' + this.todo_list[index].content)\r\n        this.todo_list.splice(index, 1)\r\n    }\r\n  }\r\n}\r\n\r\n</script> \r\n\r\n"]}]}