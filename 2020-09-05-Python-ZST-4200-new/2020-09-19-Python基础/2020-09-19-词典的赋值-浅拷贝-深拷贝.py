

if __name__ == '__main__':
    # 字典对象的直接赋值
    # 字典对象的浅拷贝
    # 字典对象的深拷贝
    # 基于json方式做的一种深拷贝
    """
        这几个案例的词典的赋值、浅拷贝、深拷贝理解了。
    """

    # 字典对象的直接赋值
    a = {
        'l': [1, 2, 3]
    }
    b = a
    print('a id', id(a))
    print('b id', id(b))
    print('a id(a[l])', id(a["l"]))
    print('b id(b[l])', id(b["l"]))

    a["l"].append(4)

    print("a['l'].append id(a['l'])", id(a["l"]))
    print("b['l'].append id(a['l'])", id(b["l"]))


    """
        a id 2704533051648
        b id 2704533051648
        a id(a[l]) 2704533943624
        b id(b[l]) 2704533943624
        a['l'].append id(a['l']) 2704533943624
        b['l'].append id(a['l']) 2704533943624
    """

    # 字典对象的浅拷贝
    # a = {
    #     'l': [1, 2, 3]
    # }
    # b = a.copy()
    # print("a", id(a))
    # print("b", id(b))
    # print("a.l", id(a["l"]))
    # print("b.l", id(b["l"]))
    #
    # a["l"].append(4)
    #
    # print(a["l"], id(a["l"]))
    # print(b["l"], id(b["l"]))

    """
        a 35150440
        b 35150872
        a.l 37559304
        b.l 37559304
        [1, 2, 3, 4] 37559304
        [1, 2, 3, 4] 37559304

        变量a的数据字典 {'l': [1, 2, 3]} 是一个父对象
        [1, 2, 3] 是变量a的子对象
        b = a.copy(): 
            发生了一次浅拷贝，变量b开辟了一块新的内存地址 2793259092512，变量b的子对象 [1, 2, 3, 4] 还是指向已有的内存地址 2793260805768
            所以当变量a的列表子对象发生改变，变量b的列表子对象也会发生改变。
        # 外层内存地址不一样，里面的内存地址一样，所以里层的列表发生修改，两个变量的里层列表都会发生改变。 **********
    """

    # 字典对象的深拷贝
    # import copy
    # a = {
    #     'l': [1, 2, 3]
    # }
    # b = copy.deepcopy(a)
    # print("a", id(a))
    # print("b", id(b))
    # print("a.l", id(a["l"]))
    # print("b.l", id(b["l"]))
    #
    # a["l"].append(4)
    # print(a["l"], id(a["l"]))
    # print(b["l"], id(b["l"]))

    """
        a 1450508966144
        b 1450509814376
        a.l 1450511318536
        b.l 1450511318728
        [1, 2, 3, 4] 1450511318536
        [1, 2, 3] 1450511318728
                 
        变量a的数据字典 {'l': [1, 2, 3]} 是一个父对象
        [1, 2, 3] 是变量a的子对象
        
        b = copy.deepcopy(a)：
            发生了一次深拷贝，变量b开辟了一块新的内存地址 1450509814376，变量b的子对象 [1, 2, 3] 也指向了新的内存地址 1450511318728
            所以当变量a的列表子对象发生改变，变量b的列表子对象不会发生改变。
            因为深拷贝完全拷贝了一份数据，所以数据的修改不会互相影响。
    """

    # 基于json方式做的一种深拷贝

    import json
    d = {"a": 1}
    s = json.dumps(d)
    d_copy = json.loads(s)
    print(id(d), id(d_copy))
    # 1608868518216 1608869367240

